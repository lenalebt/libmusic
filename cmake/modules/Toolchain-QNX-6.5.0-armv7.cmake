SET(CMAKE_SYSTEM_NAME QNX)
SET(CMAKE_SYSTEM_VERSION 6.5.0)
SET(CMAKE_SYSTEM_PROCESSOR armv7)
SET(TOOLCHAIN QNX)

#set library suffixes
SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
SET(CMAKE_STATIC_LIBRARY_SUFFIX ".a")
SET(CMAKE_SHARED_LIBRARY_PREFIX "lib")
SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")

IF(CMAKE_HOST_WIN32)
	SET(HOST_EXECUTABLE_SUFFIX ".exe")
	#you might need to set this
	SET(BBNDK_PATH /opt/bbndk-2.0.1/)
ELSE(CMAKE_HOST_WIN32)
    SET(HOST_EXECUTABLE_SUFFIX "")
	#you might need to set this
	SET(BBNDK_PATH /opt/bbndk-2.0.1/)
ENDIF(CMAKE_HOST_WIN32)

MESSAGE("BBNDK_PATH set to ${BBNDK_PATH}. If having trouble, try setting this to another value.")

FIND_PATH(QNX_HOST
  NAME usr/bin/qcc${HOST_EXECUTABLE_SUFFIX}
  PATHS $ENV{QNX_HOST} ${BBNDK_PATH}/host/linux/x86 ${BBNDK_PATH}/host/win32/x86
  NO_CMAKE_PATH
  NO_CMAKE_ENVIRONMENT_PATH
)
  
FIND_PATH(QNX_TARGET
  NAME usr/include/qnx_errno.h
  PATHS $ENV{QNX_TARGET} ${BBNDK_PATH}/target/qnx6
  NO_CMAKE_PATH
  NO_CMAKE_ENVIRONMENT_PATH
)

SET(ENV{QNX_HOST} ${QNX_HOST})
SET(ENV{QNX_TARGET} ${QNX_TARGET})
IF(CMAKE_HOST_WIN32)
  SET(ENV{QNX_CONFIGURATION} ${QNX_CONFIGURATION})
  SET(ENV{PATH} "$ENV{PATH};${QNX_HOST}/usr/bin")
ENDIF(CMAKE_HOST_WIN32)

SET(CMAKE_MAKE_PROGRAM "${QNX_HOST}/usr/bin/make${HOST_EXECUTABLE_SUFFIX}"                                  CACHE PATH "QNX Make Program")
SET(CMAKE_SH           "${QNX_HOST}/usr/bin/sh${HOST_EXECUTABLE_SUFFIX}"                                    CACHE PATH "QNX shell Program")
SET(CMAKE_AR           "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ar${HOST_EXECUTABLE_SUFFIX}"       CACHE PATH "QNX ar Program")
SET(CMAKE_RANLIB       "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ranlib${HOST_EXECUTABLE_SUFFIX}"   CACHE PATH "QNX ranlib Program")
SET(CMAKE_NM           "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-nm${HOST_EXECUTABLE_SUFFIX}"       CACHE PATH "QNX nm Program")
SET(CMAKE_OBJCOPY      "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-objcopy${HOST_EXECUTABLE_SUFFIX}"  CACHE PATH "QNX objcopy Program")
SET(CMAKE_OBJDUMP      "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-objdump${HOST_EXECUTABLE_SUFFIX}"  CACHE PATH "QNX objdump Program")
SET(CMAKE_LINKER       "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-ld"                                CACHE PATH "QNX Linker Program")
SET(CMAKE_STRIP        "${QNX_HOST}/usr/bin/nto${CMAKE_SYSTEM_PROCESSOR}-strip${HOST_EXECUTABLE_SUFFIX}"    CACHE PATH "QNX Strip Program")

SET(CMAKE_C_COMPILER ${QNX_HOST}/usr/bin/qcc)
SET(CMAKE_C_FLAGS " -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_C_FLAGS_DEBUG " -g -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_C_FLAGS_MINSIZEREL " -Os -DNDEBUG -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_C_FLAGS_RELWITHDEBINFO " -O2 -g -Vgcc_ntoarmv7le -Y_cpp ")

SET(CMAKE_CXX_COMPILER ${QNX_HOST}/usr/bin/QCC)
SET(CMAKE_CXX_FLAGS " -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_CXX_FLAGS_DEBUG " -g -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_CXX_FLAGS_MINSIZEREL " -Os -DNDEBUG -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG -Vgcc_ntoarmv7le -Y_cpp ")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO " -O2 -g -Vgcc_ntoarmv7le -Y_cpp ")

SET(CMAKE_FIND_ROOT_PATH ${QNX_TARGET}) 
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
